#include <stdlib.h>

#define CONCAT(x, y) _CONCAT(x, y)
#define _CONCAT(x, y) x ## y

#define CONCAT3(x, y, z) CONCAT(CONCAT(x, y), z)

typedef struct { 
   T* start;                                 
   size_t size, capacity;                    
} CONCAT(vec_, T); 

#define MK_VEC_WITH_CAP(E, CAP) { .start = malloc(CAP * sizeof(E)), .size = 0, .capacity = CAP }
#define MK_VEC(E) MK_VEC_WITH_CAP(E, 1)
#define MK_VEC_ZERO(E, CAP) { .start = calloc(CAP, sizeof(E)), .size = 0, .capacity = CAP }

static int CONCAT3(vec_, T, _push)(CONCAT(vec_, T)* vec, T el) { 
   if (vec->size >= vec->capacity) {     
      vec->capacity <<= 1;               
      vec->start = (T *)realloc(         
         vec->start,                     
         sizeof(T) * vec->capacity       
      );                                 
      if(vec->start == NULL) return 1;   
   }                                     
   vec->start[vec->size++] = el;         
   return 0;                             
}

static int CONCAT3(vec_ , T,  _pop)(CONCAT(vec_, T)* vec, T* value) { 
   if (vec->size == 0) return 1;         
   *value = vec->start[vec->size--];     
   if (vec->size <= vec->capacity / 2) { 
      vec->capacity >>= 1;               
      vec->start = (T *)realloc(         
         vec->start,                     
         vec->capacity * sizeof(T)       
      );                                 
      if (vec->start == NULL)            
         return 1;                       
   }                                     
   return 0;                             
}

